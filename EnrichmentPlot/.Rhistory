for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "19",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "8",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "31",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "6",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "11",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "11",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage2)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# library(dplyr)
#
# meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "33",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage2)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
d = read.csv("~/Desktop/markergenes_result.csv")
View(d)
d = read.csv("~/Desktop/markergenes_result.csv")
View(d)
d = read.csv("~/Desktop/markergenes_result.csv")
View(d)
d = read.csv("~/Desktop/markergenes_result (1).csv")
View(d)
# Split the dataframe into groups of every four columns
split_df_list <- split.default(d, rep(1:ceiling(ncol(d)/4), each=4, length.out=ncol(df)))
# Rbind the groups
result_df <- do.call(rbind, split_df_list)
# Split the dataframe into groups of every four columns
split_df_list <- split.default(d, rep(1:ceiling(ncol(d)/4), each=4, length.out=ncol(d)))
# Rbind the groups
result_df <- do.call(rbind, split_df_list)
# Split the dataframe into groups of every four columns
split_df_list <- split.default(d, rep(1:ceiling(ncol(d)/5), each=5, length.out=ncol(d)))
# Rbind the groups
result_df <- do.call(rbind, split_df_list)
View(split_df_list)
View(d)
d$new_gene <- NULL
# Split the dataframe into groups of every four columns
split_df_list <- split.default(d, rep(1:ceiling(ncol(d)/4), each=4, length.out=ncol(d)))
View(split_df_list)
# New column names
new_column_names <- c("names", "logfoldchanges", "pvals_adj", "pts")
# Change column names for each data frame in the list
list_of_dfs <- lapply(list_of_dfs, function(df) {
colnames(df) <- new_column_names
return(df)
})
# Change column names for each data frame in the list
list_of_dfs <- lapply(split_df_list, function(df) {
colnames(df) <- new_column_names
return(df)
})
# Print the modified list of data frames
print(list_of_dfs)
View(list_of_dfs)
View(d)
list_of_dfs <- lapply(names(list_of_dfs), function(name) {
df <- list_of_dfs[[name]]
df$cluster <- name-1
return(df)
})
list_of_dfs <- lapply(names(list_of_dfs), function(name) {
df <- list_of_dfs[[name]]
df$cluster <- paste0("C", as.numeric(name)-1)
return(df)
})
View(list_of_dfs)
# Print the modified list of data frames
result_df <- do.call(rbind, list_of_dfs)
View(result_df)
result_df = result_df[result_df$pvals_adj < 0.05,]
result_df = result_df[result_df$pvals_adj < 0.05 & result_df$pts > 0.25,]
for (celltype in unique(result_df$cluster)){
df_tmp = result_df%>% filter(cluster == celltype )
# Identify the column index with the maximum log fold change in each row
max_col_index <- apply(df_tmp[, df_tmp$logfoldchanges], 1, which.max)
# Extract the gene names based on the column index
max_gene <- df_tmp$names[max_col_index]
print(celltype)
print(max_gene)
}
library(dplyr)
for (celltype in unique(result_df$cluster)){
df_tmp = result_df%>% filter(cluster == celltype )
# Identify the column index with the maximum log fold change in each row
max_col_index <- apply(df_tmp[, df_tmp$logfoldchanges], 1, which.max)
# Extract the gene names based on the column index
max_gene <- df_tmp$names[max_col_index]
print(celltype)
print(max_gene)
}
View(df_tmp)
# Identify the column index with the maximum log fold change in each row
max_col_index <- apply(df_tmp[, df_tmp$logfoldchanges], 1, which.max)
for (celltype in unique(result_df$cluster)) {
df_tmp <- result_df %>% filter(cluster == celltype)
# Identify the column index with the maximum log fold change in each row
max_col_index <- apply(df_tmp[, -c(1, length(df_tmp))], 1, which.max)
# Extract the gene names based on the column index
max_gene <- df_tmp$names[max_col_index]
print(celltype)
print(max_gene)
}
for (celltype in unique(result_df$cluster)) {
df_tmp <- result_df %>% filter(cluster == celltype)
# Identify the column index with the maximum log fold change in each row
max_col_index <- apply(df_tmp[, -c(1, length(df_tmp))], 1, which.max)
# Extract the gene names based on the column index
max_gene <- df_tmp$names[max_col_index]
print(unique(celltype))
print(unique(max_gene))
}
for (celltype in unique(result_df$cluster)) {
df_tmp <- result_df %>% filter(cluster == celltype)
df_tmp = df_tmp %>% arrange(-log2foldchnages)
print(celltype)
print(df_tmp[1,1])
}
for (celltype in unique(result_df$cluster)) {
df_tmp <- result_df %>% filter(cluster == celltype)
df_tmp = df_tmp %>% arrange(-log2foldchanges)
print(celltype)
print(df_tmp[1,1])
}
for (celltype in unique(result_df$cluster)) {
df_tmp <- result_df %>% filter(cluster == celltype)
df_tmp = df_tmp %>% arrange(-logfoldchanges)
print(celltype)
print(df_tmp[1,1])
}
meta = read.csv("~/Desktop/metadata.csv")
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "38",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage2)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
## Original annotation
meta.tmp = meta[meta$leiden_0.6 == "20",]
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$Stage2)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in Stage:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
# Assuming meta.tmp is your data frame
cluster_table <- table(meta.tmp$cluster_original)
# Sort the table in descending order
sorted_table <- sort(cluster_table, decreasing = TRUE)
# Print the top three values and their proportions
cat("Top three values in cluster_original:\n")
for (i in 1:min(3, length(sorted_table))) {
value <- names(sorted_table)[i]
frequency <- sorted_table[i]
proportion <- frequency / sum(cluster_table)
cat("Value:", value, " | Frequency:", frequency, " | Proportion:", proportion, "\n")
}
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
source("run_enrichment_v4.2_GOBP.R")
data = readRDS("test-dataset/DESeq2_table.RDS")
data = readRDS("test/test-dataset/DESeq2_table.RDS")
colnames(data)
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test-result/enrichment_result.xlsx')
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test-result/enrichment_result_bp.xlsx')
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test-result/enrichment_result_bp.pdf')
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test-result/enrichment_result_bp.xlsx')
library(clusterProfiler)
library(anotate)
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
source("run_enrichment_v4.2_GOBP.R")
rm(list = ls())
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
source("run_enrichment_v4.2_GOBP.R")
data = readRDS("test/test-dataset/DESeq2_table.RDS")
colnames(data)
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test-result/enrichment_result_bp.xlsx')
rm(list = ls())
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
source("run_enrichment_v4.2_GOBP.R")
data = readRDS("test/test-dataset/DESeq2_table.RDS")
colnames(data)
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test/test-result/enrichment_result_bp.xlsx')
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
source("run_enrichment_v4.2_GOBP.R")
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
source("run_enrichment_v4.2_GOBP.R")
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
source("run_enrichment_v4.2_GOBP.R")
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
source("run_enrichment_v4.2_GOBP.R")
source("run_enrichment_v4.2_GOBP.R")
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
source("run_enrichment_v4.2_GOBP.R")
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
rm(list = ls())
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/CodeShareHub/EnrichmentPlot/")
source("run_enrichment_v4.2_GOBP.R")
data = readRDS("test/test-dataset/DESeq2_table.RDS")
colnames(data)
# Enrichment test
res = run_all(data, lfc_column = "log2FoldChange",
padj_column = "padj",
gene_name_column = 'gene_name',
lfc_thresh = 0.25,
padj_cutoff = 0.05,
organism = 'human',
minGSSize = 100,
maxGSSize = 2000,
output_file = 'test/test-result/enrichment_result_bp.xlsx')
res_pl = plot_all(res,
width = 22.5,
height = 20,
output_file = 'test/test-result/enrichment_result_bp.pdf')
